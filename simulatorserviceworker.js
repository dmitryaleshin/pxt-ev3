function initSimulatorServiceWorker(){const r="@relprefix@".replace("---","").replace(/^\//,""),t=-1===r.indexOf("/"),i="makecode-sim;"+r+";@pxtRelId@",n=["@simUrl@","/pxt-ev3/pxtsim.js","/pxt-ev3/sim.js"].map(e=>e.trim()).filter(e=>!!e&&0!==e.indexOf("@"));let l=!(self.setSimulatorWorkerOptions=e=>{e&&Array.isArray(e.urls)&&n.push(...s(e.urls.map(e=>e.trim()).filter(e=>!!e)))});function s(e){var t=[];for(const r of e)-1===t.indexOf(r)&&t.push(r);return t}self.addEventListener("install",e=>{if(t){l=!0;try{importScripts("@simworkerconfigUrl@")}catch(e){console.log("Failed to load target service worker config")}console.log("Installing service worker..."),e.waitUntil(caches.open(i).then(e=>(console.log("Opened cache"),e.addAll(s(n)))).then(()=>self.skipWaiting()))}else console.log("Skipping service worker install for unnamed endpoint")}),self.addEventListener("activate",e=>{t?(console.log("Activating service worker..."),e.waitUntil(caches.keys().then(e=>{e=e.filter(e=>{var t=3!==(t=e.split(";")).length?null:t[1];return null===t||t===r&&e!==i});return Promise.all(e.map(e=>caches.delete(e)))}).then(()=>{if(l){l=!1;{const e=self;return e.clients.claim().then(()=>e.clients.matchAll()).then(e=>{e.forEach(e=>e.postMessage({type:"serviceworker",state:"activated",ref:r}))})}}return Promise.resolve()}))):console.log("Skipping service worker activate for unnamed endpoint")}),self.addEventListener("fetch",t=>{t.respondWith(caches.match(t.request).then(e=>e||fetch(t.request)))})}initSimulatorServiceWorker();